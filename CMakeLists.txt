CMAKE_MINIMUM_REQUIRED(VERSION 3.8 FATAL_ERROR)

PROJECT(DuskEditor VERSION 0.0.1)

IF(WIN32)
    FIND_PATH(GTK3_INCLUDE_DIRS gtk/gtk.h)
    FIND_LIBRARY(GTK3_LIBRARIES gtk-3.0)

    IF(NOT GTK3_INCLUDE_DIRS OR NOT GTK3_LIBRARIES)
        MESSAGE(FATAL_ERROR "gtk not found, install with `vcpkg install gtk:x64-windows`")
    ENDIF()

    FIND_PATH(GLIB_INCLUDE_DIRS glib/gmain.h)
    FIND_LIBRARY(GLIB_LIBRARIES glib-2.0)

    FIND_PATH(GIO_INCLUDE_DIRS gio/gio.h)
    FIND_LIBRARY(GIO_LIBRARIES gio-2.0)

    FIND_PATH(GOBJECT_INCLUDE_DIRS gobject/gobject.h)
    FIND_LIBRARY(GOBJECT_LIBRARIES gobject-2.0)

    LIST(APPEND GTK3_INCLUDE_DIRS ${GLIB_INCLUDE_DIRS} ${GIO_INCLUDE_DIRS} ${GOBJECT_INCLUDE_DIRS})
    LIST(APPEND GTK3_LIBRARIES ${GLIB_LIBRARIES} ${GIO_LIBRARIES} ${GOBJECT_LIBRARIES})
ELSE()
    FIND_PACKAGE(PkgConfig REQUIRED)
    PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)
ENDIF()

SET(OpenGL_GL_PREFERENCE "LEGACY")
FIND_PACKAGE(OpenGL REQUIRED)

FIND_PROGRAM(GLIB_COMPILE_RESOURCES glib-compile-resources)

SET(_RESOURCE_LIST "DuskEditor.resource.xml")
SET(_RESOURCE_SOURCE "${CMAKE_BINARY_DIR}/Resources.cpp")

FILE(GLOB_RECURSE
    _ASSETS
    "*.ui"
)

ADD_CUSTOM_COMMAND(
    OUTPUT ${_RESOURCE_SOURCE}
    DEPENDS ${_RESOURCE_LIST} ${_ASSETS}
    COMMAND ${GLIB_COMPILE_RESOURCES} ${_RESOURCE_LIST} --target ${_RESOURCE_SOURCE} --generate-source
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

FILE(GLOB_RECURSE
    _SOURCES
    "src/*.h"
    "src/*.c"
    "src/*.hpp"
    "src/*.cpp"
)

ADD_EXECUTABLE(
    ${PROJECT_NAME}
    ${_SOURCES}
    ${_RESOURCE_SOURCE}
)

TARGET_INCLUDE_DIRECTORIES(
    ${PROJECT_NAME}
    PRIVATE
        src/
        ${GTK3_INCLUDE_DIRS}
)

TARGET_LINK_LIBRARIES(
    ${PROJECT_NAME}
    PRIVATE
        ${GTK3_LIBRARIES}
        OpenGL::GL
)

IF(NOT WIN32)
    TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
        PRIVATE
            dl
    )
ENDIF()

ADD_CUSTOM_TARGET(
    run
    COMMAND $<TARGET_FILE:${PROJECT_NAME}>
    DEPENDS ${PROJECT_NAME}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)